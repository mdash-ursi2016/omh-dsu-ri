!function(t,e){var r="OMHWebVisualizations";t[r]=e(t,r)}(this,function(root,parentName){var parent=root.hasOwnProperty(parentName)?root[parentName]:{},ChartStyles;ChartStyles=function(configuration){var plotStyles=[],getPointThresholds=function(t){return configuration.getMeasureSettings(t.measure).thresholds};this.getConfiguredStylesForPlot=function(plot){var measures=configuration.getConfiguredMeasureNames(),styles=[];return measures.forEach(function(measure){var measureSettings=configuration.getMeasureSettings(measure);if(measureSettings.chart&&measureSettings.chart.styles){var measureStyles=measureSettings.chart.styles;measureStyles.forEach(function(style){var plotClass=eval("Plottable.Plots."+style.plotType);if(plot instanceof plotClass){var measureFilter=function(t){return t.measure===measure},newStyle={name:style.name,filters:[measureFilter],attributes:style.attributes};style.filters&&style.filters.forEach(function(t){newStyle.filters.push(t)}),styles.push(newStyle)}})}}),styles},this.getConfiguredDefaultStylesForPlot=function(t){var e=ChartStyles.getDefaultStylesForPlot(t),r=this.getConfiguredStylesForPlot(t);return e.concat(r)},this.applyFilters=function(t,e){for(j=0;j<t.length;j++)if(!t[j](e))return!1;return!0},this.getAttributeValueAccessor=function(t,e){return function(r){var s=this.resolveAttributeValue(t,r);return s?s:e(r)}.bind(this)},this.getStylesKeyedByAttributeName=function(t){var e={};return t.forEach(function(t){var r=Object.getOwnPropertyNames(t.attributes);r.forEach(function(r){e[r]||(e[r]=[]);var s={};s.value=t.attributes[r],t.filters&&(s.filters=t.filters),e[r].push(s)})}),e},this.getFilteredProperty=function(t,e,r){for(i=r.length-1;i>=0;i--){var s=r[i].filters,a=r[i][e];if(!s)return a;if(this.applyFilters(s,t))return a}return null},this.resolveAttributeValue=function(t,e){return this.getFilteredProperty(e,"value",t)},this.getStylesForPlot=function(t){for(var e in plotStyles)if(plotStyles[e].plot===t)return plotStyles[e].styles},this.setStylesForPlot=function(t,e){var r=this.getStylesForPlot(e);r?r.styles=t:plotStyles.push({plot:e,styles:t}),this.assignAttributesToPlot(t,e)},this.resolveStyleNameForDatumInPlot=function(t,e){var r=this.getStylesForPlot(e);return r?this.getFilteredProperty(t,"name",r):null},this.assignAttributesToPlot=function(t,e){var r=this.getStylesKeyedByAttributeName(t);for(var s in r)"size"===s?(defaultAccessor=e.size()?e.size().accessor:null,e.size(this.getAttributeValueAccessor(r[s],defaultAccessor))):(defaultAccessor=e.attr(s)?e.attr(s).accessor:null,e.attr(s,this.getAttributeValueAccessor(r[s],defaultAccessor)))},this.addToSelection=function(t){var e=t.select("defs")[0][0];e=e?d3.select(e):t.append("defs");var r=e.select("#y-axis-label-gradient")[0][0];r||(r=e.append("linearGradient").attr("id","y-axis-label-gradient").attr("x1","0%").attr("y1","0%").attr("x2","0%").attr("y2","100%").attr("spreadMethod","pad"),r.append("stop").attr("offset","0%").attr("stop-color","#fff").attr("stop-opacity",1),r.append("stop").attr("offset","75%").attr("stop-color","#fff").attr("stop-opacity",1),r.append("stop").attr("offset","100%").attr("stop-color","#fff").attr("stop-opacity",0))}};var formatters={};return ChartStyles.formatters=formatters,ChartStyles.formatters.defaultTooltip=function(t){var e;if("_systolic_blood_pressure_diastolic_blood_pressure"===t.omhDatum.groupName){var r=t.omhDatum.body.systolic_blood_pressure.value.toFixed(0),s=t.omhDatum.body.diastolic_blood_pressure.value.toFixed(0);e=r+"/"+s}else{var a=this.getInterfaceSettings().tooltips,o="undefined"!=typeof a.decimalPlaces?a.decimalPlaces:1;e=t.y.toFixed(o)}return e},ChartStyles.getDefaultStylesForPlot=function(plot){var defaults={Scatter:[{name:"default",attributes:{fill:"#4a90e2",stroke:"#0066d6","stroke-width":"1px",size:9,opacity:.5}}],Line:[{name:"default",attributes:{stroke:"#dedede","stroke-width":"1px"}}],ClusteredBar:[{name:"default",attributes:{fill:"#4a90e2"}},{name:"secondary",filters:[function(t){return!t.primary}],attributes:{fill:"#eeeeee"}}]},defaultStyleForPlot=null;for(var plotType in defaults){var plotClass=eval("Plottable.Plots."+plotType);plot instanceof plotClass&&(defaultStyleForPlot=defaults[plotType])}return defaultStyleForPlot?defaultStyleForPlot:{}},ChartStyles.filters={measure:function(t){return function(e){return e.measure===t}},above:function(t){return function(e){return e.y>t}},below:function(t){return function(e){return e.y<t}},dailyBeforeHour:function(t){return function(e){return e.x.getHours()<t}}},parent.ChartStyles=ChartStyles,parent});