package dash;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@RestController
public class AuthorizationController {

    @RequestMapping("/hello")
    public String index() {
	return "Greetings from Spring Boot! -- Says Alex";
    }

    @RequestMapping("/test")
    public String test(@RequestParam(value = "name") String name, @RequestParam(value = "test") String tester) {
	return "The name is: " + name + " and the value is: " + tester;
    }

    @RequestMapping(value = "/code", method = RequestMethod.GET)
    public String processCode(@RequestParam(value = "code", required = false) String code) {

	if (code == null) {
	    return "User denied access. Goodbye!";
	} else {
	    String target = createOAuthTokenUrl();
	    String parameters = createOAuthTokenParameters(code);
	    String response = sendTokenPost(target, parameters);
	    System.out.println("This was our response: ");
	    System.out.println(response);
	    return response;
	}
    }


    
    private String sendTokenPost(String target, String parameters) {
	String authString = createEncodedAuthString();
	HttpURLConnection connection = null;

	BufferedReader reader = null;
	StringBuilder builder = new StringBuilder();
	String line = null;
	String failString = "";

	try {
	    URL url = new URL(target);
	    connection = (HttpURLConnection) url.openConnection();
	    connection.setRequestMethod("POST");
	    connection.setRequestProperty("Authorization", "Basic " + authString);
	    connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
	    connection.setRequestProperty("Accept", "application/json");
	    connection.setRequestProperty("Cache-Control", "no-cache");
	    connection.setUseCaches(false);
	    connection.setDoOutput(true); // Output to send data in post
	    connection.setDoInput(true); // Input to retrieve data from server

	    // Write the body of the request
	    DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
	    outputStream.writeBytes(parameters);
	    outputStream.flush();
	    outputStream.close();

	    // Connect
	    connection.connect(); // Necessary? Can I remove?

	    // Read body
	    InputStream inputStream = connection.getInputStream();

	    reader = new BufferedReader(new InputStreamReader(inputStream));
	    while ((line = reader.readLine()) != null) {
		builder.append(line + "\n");
	    }
	    reader.close();

	    System.out.println(builder.toString());
	    return builder.toString();

	} catch (Exception e) {
	    System.out.println(e.toString());
	    System.out.println(e.getMessage());
	    failString += "failed";
	    return failString;
	} finally {
	    if (connection != null) {
		connection.disconnect();
	    }
	}

    }
    

    private String createOAuthTokenUrl() {
	String url = "http://143.229.6.40:80/oauth/token";
	return url;
    }

    private String createOAuthTokenParameters(String code) {
	String parameters = "client_id=" + CLIENT_ID;
	parameters += "&client_secret=" + CLIENT_SECRET;
	parameters += "&grant_type=" + "authorization_code";
	parameters += "&code=" + code;
	parameters += "&redirect_uri=" + "http://143.229.6.40:8080/access";
	return parameters;
    }

    private String createEncodedAuthString() {
	Base64 base = new Base64();
	String authString = CLIENT_ID + ":" + CLIENT_SECRET;
	String authStringEnc = base.encodeBase64String(authString.getBytes());

	return authStringEnc;
    }

}
